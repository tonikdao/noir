{"version":3,"sources":["use-slerp.js","use-layers.js","use-render-target.js","ThinFilmFresnelMap.js","data.js","Scene1.js","Scene2.js","Scene3.js","index.js"],"names":["useSlerp","group","useRef","viewport","useThree","useMemo","THREE","rotationEuler","rotationQuaternion","useFrame","mouse","current","x","width","y","height","set","setFromEuler","quaternion","slerp","useLayers","layers","ref","useEffect","disableAll","sort","forEach","layer","enable","useRenderTarget","settings","renderTarget","renderTargetSettings","format","generateMipmaps","cubeCamera","gl","scene","update","ThinFilmFresnelMap","filmThickness","refractiveIndexFilm","refractiveIndexBase","size","this","_filmThickness","_refractiveIndexFilm","_refractiveIndexBase","_size","_data","Uint8Array","_updateData","call","needsUpdate","prototype","Object","create","get","value","updateSettings","_fresnelRefl","refractiveIndex1","refractiveIndex2","cos1","cos2","R","phi","sin1Sqr","refrRatio","sqrRefrRatio","Math","atan","sqrt","r_p","r_s","PI","xFit_1931","lambda","t1","t2","t3","exp","yFit_1931","zFit_1931","data","phi12","phi21","phi23","R12","T12","R23","R_bi","T_tot","R_star","R_bi_sqr","R_12_star","R_star_t_tot","refrRatioSqr","refrRatioSqrBase","i","cosThetaI","cosThetaT","cosThetaT2","pathDiff","pathDiff2PI","z","totX","totY","totZ","j","waveLen","deltaPhase","cosPhiX","cos","cosPhiY","v","wx","wy","wz","r","g","b","clamp","k","floor","mirrorsData","mirrors","args","position","rotation","TEXT_PROPS","fontSize","font","process","Title","props","lookAt","textRef","name","depthTest","material-toneMapped","material-color","Mirror","sideMaterial","reflectionMaterial","material","Mirrors","envMap","useState","thinFilmFresnelMap","useResource","map","color","mirror","index","key","TitleCopies","vertices","vertex","console","log","Scene","useMatcapTexture","matcapTexture","matcap","side","transparent","opacity","texture","roughness","metalness","Diamond","Diamonds","nodes","useGLTFLoader","diamondsData","geometry","Cylinder","scale","Background","textProps","label","castShadow","PhysicalWalls","usePlane","receiveShadow","PhysicalTitle","useBox","api","onClick","applyImpulse","Array","ROWS","fill","_","mass","friction","restitution","gravity","intensity","shadow-mapSize-width","shadow-mapSize-height","shadow-camera-far","shadow-camera-left","shadow-camera-right","shadow-camera-top","shadow-camera-bottom","Loader","progress","useProgress","center","style","App","concurrent","shadowMap","camera","fov","attach","fallback","Scene1","Scene2","Body","className","exact","render","document","querySelector"],"mappings":"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","file":"static/js/main.94c9bae9.chunk.js","sourcesContent":["import { useMemo, useRef } from 'react'\nimport * as THREE from 'three'\nimport { useFrame, useThree } from 'react-three-fiber'\n\nfunction useSlerp() {\n  const group = useRef()\n  const { viewport } = useThree()\n\n  const [rotationEuler, rotationQuaternion] = useMemo(\n    () => [new THREE.Euler(0, 0, 0), new THREE.Quaternion(0, 0, 0, 0)],\n    []\n  )\n\n  useFrame(({ mouse }) => {\n    if (!group.current) return\n\n    const x = (mouse.x * viewport.width) / 100\n    const y = (mouse.y * viewport.height) / 100\n    rotationEuler.set(y, x, 0)\n    rotationQuaternion.setFromEuler(rotationEuler)\n    group.current.quaternion.slerp(rotationQuaternion, 0.1)\n  })\n\n  return group\n}\n\nexport default useSlerp\n","import { useEffect, useRef } from 'react'\n\nfunction useLayers(layers = [0]) {\n  const ref = useRef()\n\n  useEffect(() => {\n    ref.current.layers.disableAll()\n\n    layers.sort().forEach((layer) => {\n      ref.current.layers.enable(layer)\n    })\n  })\n\n  return ref\n}\n\nexport default useLayers\n","import { useMemo, useRef } from 'react'\nimport * as THREE from 'three'\nimport { useFrame } from 'react-three-fiber'\n\nfunction useRenderTarget(settings = {}) {\n  const renderTarget = useMemo(() => {\n    const renderTargetSettings = {\n      format: THREE.RGBAFormat,\n      generateMipmaps: true\n    }\n\n    return new THREE.WebGLCubeRenderTarget(1024, {\n      ...renderTargetSettings,\n      ...settings\n    })\n  }, [settings])\n\n  const cubeCamera = useRef()\n\n  useFrame(({ gl, scene }) => {\n    if (!cubeCamera.current) return\n    cubeCamera.current.update(gl, scene)\n  })\n\n  return [cubeCamera, renderTarget]\n}\n\nexport default useRenderTarget\n","/**\n * @classdesc\n * ThinFilmFresnelMap is a lookup texture containing the reflection colour. The texture index value\n * is dot(normal, view). The texture values are stored in approximated gamma space (power 2.0), so\n * the sampled value needs to be multiplied with itself before use. The sampled value should replace\n * the fresnel factor in a PBR material.\n *\n * @property filmThickness The thickness of the thin film layer in nanometers. Defaults to 380.\n * @property refractiveIndexFilm The refractive index of the thin film. Defaults to 2.\n * @property refractiveIndexBase The refractive index of the material under the film. Defaults to 3.\n *\n * @constructor\n * @param filmThickness The thickness of the thin film layer in nanometers. Defaults to 380.\n * @param refractiveIndexFilm The refractive index of the thin film. Defaults to 2.\n * @param refractiveIndexBase The refractive index of the material under the film. Defaults to 3.\n * @param size The width of the texture. Defaults to 64.\n *\n * @extends DataTexture\n *\n * @author David Lenaerts <http://www.derschmale.com>\n */\nimport * as THREE from 'three'\n\nexport function ThinFilmFresnelMap(filmThickness, refractiveIndexFilm, refractiveIndexBase, size) {\n  this._filmThickness = filmThickness || 500.0\n  this._refractiveIndexFilm = refractiveIndexFilm || 2\n  this._refractiveIndexBase = refractiveIndexBase || 3\n  this._size = size || 128\n  this._data = new Uint8Array(this._size * 4)\n\n  this._updateData()\n\n  THREE.DataTexture.call(\n    this,\n    this._data,\n    this._size,\n    1,\n    THREE.RGBAFormat,\n    THREE.UnsignedByteType,\n    THREE.UVMapping,\n    THREE.RepeatWrapping,\n    THREE.RepeatWrapping,\n    THREE.LinearFilter,\n    THREE.LinearMipMapLinearFilter\n  )\n  this.generateMipmaps = true\n  this.needsUpdate = true\n}\n\nThinFilmFresnelMap.prototype = Object.create(THREE.DataTexture.prototype, {\n  filmThickness: {\n    get: function () {\n      return this._filmThickness\n    },\n    set: function (value) {\n      this._filmThickness = value\n      this.updateSettings(this._filmThickness, this._refractiveIndexFilm, this._refractiveIndexBase)\n    }\n  },\n  refractiveIndexFilm: {\n    get: function () {\n      return this._refractiveIndexFilm\n    },\n    set: function (value) {\n      this._refractiveIndexFilm = value\n      this.updateSettings(this._filmThickness, this._refractiveIndexFilm, this._refractiveIndexBase)\n    }\n  },\n  refractiveIndexBase: {\n    get: function () {\n      return this._refractiveIndexBase\n    },\n    set: function (value) {\n      this._refractiveIndexBase = value\n      this.updateSettings(this._filmThickness, this._refractiveIndexFilm, this._refractiveIndexBase)\n    }\n  }\n})\n\n/**\n * Regenerates the lookup texture given new data.\n * @param filmThickness The thickness of the thin film layer in nanometers. Defaults to 380.\n * @param refractiveIndexFilm The refractive index of the thin film. Defaults to 2.\n * @param refractiveIndexBase The refractive index of the material under the film. Defaults to 3.\n */\nThinFilmFresnelMap.prototype.updateSettings = function (filmThickness, refractiveIndexFilm, refractiveIndexBase) {\n  this._filmThickness = filmThickness || 380\n  this._refractiveIndexFilm = refractiveIndexFilm || 2\n  this._refractiveIndexBase = refractiveIndexBase || 3\n  this._updateData()\n}\n\n/**\n * @private\n */\nThinFilmFresnelMap.prototype._fresnelRefl = function (refractiveIndex1, refractiveIndex2, cos1, cos2, R, phi) {\n  // r is amplitudinal, R is power\n  var sin1Sqr = 1.0 - cos1 * cos1 // = sin^2(incident)\n  var refrRatio = refractiveIndex1 / refractiveIndex2\n\n  if (refrRatio * refrRatio * sin1Sqr > 1.0) {\n    // total internal reflection\n    R.x = 1.0\n    R.y = 1.0\n\n    var sqrRefrRatio = refrRatio * refrRatio\n    // it looks like glsl's atan ranges are different from those in JS?\n    phi.x = 2.0 * Math.atan((-sqrRefrRatio * Math.sqrt(sin1Sqr - 1.0 / sqrRefrRatio)) / cos1)\n    phi.y = 2.0 * Math.atan(-Math.sqrt(sin1Sqr - 1.0 / sqrRefrRatio) / cos1)\n  } else {\n    var r_p = (refractiveIndex2 * cos1 - refractiveIndex1 * cos2) / (refractiveIndex2 * cos1 + refractiveIndex1 * cos2)\n    var r_s = (refractiveIndex1 * cos1 - refractiveIndex2 * cos2) / (refractiveIndex1 * cos1 + refractiveIndex2 * cos2)\n\n    phi.x = r_p < 0.0 ? Math.PI : 0.0\n    phi.y = r_s < 0.0 ? Math.PI : 0.0\n\n    R.x = r_p * r_p\n    R.y = r_s * r_s\n  }\n}\n\n/**\n * @private\n */\nThinFilmFresnelMap.prototype._updateData = function () {\n  var filmThickness = this._filmThickness\n  var refractiveIndexFilm = this._refractiveIndexFilm\n  var refractiveIndexBase = this._refractiveIndexBase\n  var size = this._size\n\n  // approximate CIE XYZ weighting functions from: http://jcgt.org/published/0002/02/01/paper.pdf\n  function xFit_1931(lambda) {\n    var t1 = (lambda - 442.0) * (lambda < 442.0 ? 0.0624 : 0.0374)\n    var t2 = (lambda - 599.8) * (lambda < 599.8 ? 0.0264 : 0.0323)\n    var t3 = (lambda - 501.1) * (lambda < 501.1 ? 0.049 : 0.0382)\n    return 0.362 * Math.exp(-0.5 * t1 * t1) + 1.056 * Math.exp(-0.5 * t2 * t2) - 0.065 * Math.exp(-0.5 * t3 * t3)\n  }\n\n  function yFit_1931(lambda) {\n    var t1 = (lambda - 568.8) * (lambda < 568.8 ? 0.0213 : 0.0247)\n    var t2 = (lambda - 530.9) * (lambda < 530.9 ? 0.0613 : 0.0322)\n    return 0.821 * Math.exp(-0.5 * t1 * t1) + 0.286 * Math.exp(-0.5 * t2 * t2)\n  }\n\n  function zFit_1931(lambda) {\n    var t1 = (lambda - 437.0) * (lambda < 437.0 ? 0.0845 : 0.0278)\n    var t2 = (lambda - 459.0) * (lambda < 459.0 ? 0.0385 : 0.0725)\n    return 1.217 * Math.exp(-0.5 * t1 * t1) + 0.681 * Math.exp(-0.5 * t2 * t2)\n  }\n\n  var data = this._data\n  var phi12 = new THREE.Vector2()\n  var phi21 = new THREE.Vector2()\n  var phi23 = new THREE.Vector2()\n  var R12 = new THREE.Vector2()\n  var T12 = new THREE.Vector2()\n  var R23 = new THREE.Vector2()\n  var R_bi = new THREE.Vector2()\n  var T_tot = new THREE.Vector2()\n  var R_star = new THREE.Vector2()\n  var R_bi_sqr = new THREE.Vector2()\n  var R_12_star = new THREE.Vector2()\n  var R_star_t_tot = new THREE.Vector2()\n\n  var refrRatioSqr = 1.0 / (refractiveIndexFilm * refractiveIndexFilm)\n  var refrRatioSqrBase = (refractiveIndexFilm * refractiveIndexFilm) / (refractiveIndexBase * refractiveIndexBase)\n\n  // RGB is too limiting, so we use the entire spectral domain, but using limited samples (64) to\n  // create more pleasing bands\n  var numBands = 64\n  var waveLenRange = 780 - 380 // the entire visible range\n\n  for (var i = 0; i < size; ++i) {\n    var cosThetaI = i / size\n    var cosThetaT = Math.sqrt(1 - refrRatioSqr * (1.0 - cosThetaI * cosThetaI))\n    var cosThetaT2 = Math.sqrt(1 - refrRatioSqrBase * (1.0 - cosThetaT * cosThetaT))\n\n    // this is essentially the extra distance traveled by a ray if it bounds through the film\n    var pathDiff = 2.0 * refractiveIndexFilm * filmThickness * cosThetaT\n    var pathDiff2PI = 2.0 * Math.PI * pathDiff\n\n    this._fresnelRefl(1.0, refractiveIndexFilm, cosThetaI, cosThetaT, R12, phi12)\n    T12.x = 1.0 - R12.x\n    T12.y = 1.0 - R12.y\n    phi21.x = Math.PI - phi12.x\n    phi21.y = Math.PI - phi12.y\n\n    // this concerns the base layer\n    this._fresnelRefl(refractiveIndexFilm, refractiveIndexBase, cosThetaT, cosThetaT2, R23, phi23)\n    R_bi.x = Math.sqrt(R23.x * R12.x)\n    R_bi.y = Math.sqrt(R23.y * R12.y)\n    T_tot.x = Math.sqrt(T12.x * T12.x)\n    T_tot.y = Math.sqrt(T12.y * T12.y)\n    R_star.x = (T12.x * T12.x * R23.x) / (1.0 - R23.x * R12.x)\n    R_star.y = (T12.y * T12.y * R23.y) / (1.0 - R23.y * R12.y)\n    R_bi_sqr.x = R_bi.x * R_bi.x\n    R_bi_sqr.y = R_bi.y * R_bi.y\n    R_12_star.x = R12.x + R_star.x\n    R_12_star.y = R12.y + R_star.y\n    R_star_t_tot.x = R_star.x - T_tot.x\n    R_star_t_tot.y = R_star.y - T_tot.y\n    var x = 0,\n      y = 0,\n      z = 0\n    var totX = 0,\n      totY = 0,\n      totZ = 0\n\n    // TODO: we could also put the thickness in the look-up table, make it a 2D table\n    for (var j = 0; j < numBands; ++j) {\n      var waveLen = 380 + (j / (numBands - 1)) * waveLenRange\n      var deltaPhase = pathDiff2PI / waveLen\n\n      var cosPhiX = Math.cos(deltaPhase + phi23.x + phi21.x)\n      var cosPhiY = Math.cos(deltaPhase + phi23.y + phi21.y)\n      var valX =\n        R_12_star.x +\n        ((2.0 * (R_bi.x * cosPhiX - R_bi_sqr.x)) / (1.0 - 2 * R_bi.x * cosPhiX + R_bi_sqr.x)) * R_star_t_tot.x\n      var valY =\n        R_12_star.y +\n        ((2.0 * (R_bi.y * cosPhiY - R_bi_sqr.y)) / (1.0 - 2 * R_bi.y * cosPhiY + R_bi_sqr.y)) * R_star_t_tot.y\n      var v = 0.5 * (valX + valY)\n\n      var wx = xFit_1931(waveLen)\n      var wy = yFit_1931(waveLen)\n      var wz = zFit_1931(waveLen)\n\n      totX += wx\n      totY += wy\n      totZ += wz\n\n      x += wx * v\n      y += wy * v\n      z += wz * v\n    }\n\n    x /= totX\n    y /= totY\n    z /= totZ\n\n    var r = 3.2406 * x - 1.5372 * y - 0.4986 * z\n    var g = -0.9689 * x + 1.8758 * y + 0.0415 * z\n    var b = 0.0557 * x - 0.204 * y + 1.057 * z\n\n    r = THREE.Math.clamp(r, 0.0, 1.0)\n    g = THREE.Math.clamp(g, 0.0, 1.0)\n    b = THREE.Math.clamp(b, 0.0, 1.0)\n\n    r = g =b = 0.299 * r + 0.587 * g + 0.114 * b\n\n    // linear to gamma\n    r = Math.sqrt(r)\n    g = Math.sqrt(g)\n    b = Math.sqrt(b)\n\n    // CIE XYZ to linear rgb conversion matrix:\n    // 3.2406 -1.5372 -0.4986\n    // -0.9689  1.8758  0.0415\n    // 0.0557 -0.2040  1.0570\n\n    var k = i << 2\n    data[k] = Math.floor(r * 0xff)\n    data[k + 1] = Math.floor(g * 0xff)\n    data[k + 2] = Math.floor(b * 0xff)\n    data[k + 3] = 0xff\n  }\n\n  this.needsUpdate = true\n}\n","export const mirrorsData = {\n  mirrors: [\n    {\n      args: [2.87483173052424, 2.920755196190408, 0.05],\n      position: [3.116376203948097, -2.1742814140991196, -7.998859699752443],\n      rotation: [1.2536197471688286, -1.6683567077395978, -2.8428053193736256]\n    },\n    {\n      args: [1.799233278635274, 1.9642524560408021, 0.05],\n      position: [-3.325473394997085, 3.5307542721423446, -6.530151273151705],\n      rotation: [1.3951213133257899, -0.2888432911308304, 0.7178380971731012]\n    },\n    {\n      args: [2.8780801433198553, 2.9065216543855974, 0.05],\n      position: [1.2839348832937714, 2.888947614684322, -6.467835086028824],\n      rotation: [-1.3341775957580109, 2.8031736269533125, -0.18771283594857274]\n    },\n    {\n      args: [2.2175936863874006, 1.3820832190972703, 0.05],\n      position: [4.552400557892, 0.9814639517113943, -5.836395383986279],\n      rotation: [-2.3299625953354437, 0.6139693063561498, -0.3902201705507059]\n    },\n    {\n      args: [1.7446126775638997, 2.6211835436253392, 0.05],\n      position: [-2.826056860647832, -3.0308788716782042, -5.4685371584057485],\n      rotation: [-1.4052581815125295, 3.002812728418492, 2.54202362440499]\n    },\n    {\n      args: [1.139549518339333, 1.8007363020629232, 0.05],\n      position: [-0.041834072623521124, -1.351281881742426, -2.40411451302583],\n      rotation: [1.2848394396618561, -0.310029190116405, -2.107987000676972]\n    },\n    {\n      args: [2.2021865186914007, 2.610358395964105, 0.05],\n      position: [-4.1542927375782015, -0.349560252979882, -2.489538720961452],\n      rotation: [1.4401104979160235, 1.8179123712769852, -2.2157249608220475]\n    },\n    {\n      args: [2.0964670262303393, 1.5750930602784585, 0.05],\n      position: [6.571372497652996, -2.6457284555412066, -6.252562745592483],\n      rotation: [1.1870955922970219, 0.5335941225301444, 0.4523391139946649]\n    },\n    {\n      args: [1.3270056676441064, 1.5169873297208318, 0.05],\n      position: [3.6761316187794724, -4.141729519755186, -4.39063863430271],\n      rotation: [-0.7690386626408349, 1.4093151276977963, 2.0252977680762476]\n    },\n    {\n      args: [5.1426105440458216, 4.416201863189162, 0.05],\n      position: [0.646982562789564, 7.0909673302614196, -8.351518200349154],\n      rotation: [-0.0692356415822184, 1.918047448701773, 0.5268942683942657]\n    }\n  ]\n}\n\nexport const textData = [\n  {\n    position: [0, 0, -10],\n    rotation: [0, 0, 0],\n    scale: [1, 1, 1]\n  },\n  {\n    position: [0, 0, 10],\n    rotation: [0, 0, 0],\n    scale: [-1, 1, 1]\n  },\n  {\n    position: [-10, 0, 0],\n    rotation: [0, Math.PI / 2, 0],\n    scale: [1, 1, 1]\n  },\n  {\n    position: [10, 0, 0],\n    rotation: [0, -Math.PI / 2, 0],\n    scale: [-1, 1, 1]\n  },\n  {\n    position: [0, 10, 0],\n    rotation: [Math.PI / 2, 0, 0],\n    scale: [1, 1, 1]\n  },\n  {\n    position: [0, -10, 0],\n    rotation: [-Math.PI / 2, 0, 0],\n    scale: [-1, 1, 1]\n  }\n]\n","import React, { useEffect, useMemo, useRef, useState } from 'react'\nimport * as THREE from 'three'\nimport { useFrame, useResource } from 'react-three-fiber'\nimport { Text, Box, useMatcapTexture, Octahedron } from '@react-three/drei'\n\nimport useSlerp from './use-slerp'\nimport useLayers from './use-layers'\nimport useRenderTarget from './use-render-target'\n\nimport { ThinFilmFresnelMap } from './ThinFilmFresnelMap'\nimport { mirrorsData } from './data'\n\n\nconst TEXT_PROPS = {\n  fontSize: 2.5,\n  font: process.env.PUBLIC_URL + '/fonts/numero7.woff'\n}\nconsole.log (TEXT_PROPS.font);\n\nfunction Title({ layers, ...props }) {\n  const group = useRef()\n  useEffect(() => {\n    group.current.lookAt(0, 0, 0)\n  }, [])\n\n  const textRef = useLayers(layers)\n\n  return (\n    <group {...props} ref={group}>\n      <Text ref={textRef} name=\"text-panna\" depthTest={false} material-toneMapped={false} material-color=\"#FFFFFF\" {...TEXT_PROPS}>\n        NUMEROnoir\n      </Text>\n    </group>\n  )\n}\n\nfunction Mirror({ sideMaterial, reflectionMaterial, args, layers, ...props }) {\n  const ref = useLayers(layers)\n\n  useFrame(() => {\n    if (ref.current) {\n      ref.current.rotation.y += 0.001\n      ref.current.rotation.z += 0.01\n    }\n  })\n\n  return (\n    <Box\n      {...props}\n      ref={ref}\n      args={args}\n      material={[sideMaterial, sideMaterial, sideMaterial, sideMaterial, reflectionMaterial, reflectionMaterial]}\n    />\n  )\n}\n\nfunction Mirrors({ envMap, layers, ...props }) {\n  const [thinFilmFresnelMap] = useState(new ThinFilmFresnelMap())\n  const sideMaterial = useResource()\n  const reflectionMaterial = useResource()\n\n  return (\n    <group name=\"mirrors\" {...props}>\n      <meshLambertMaterial ref={sideMaterial} map={thinFilmFresnelMap} color=\"#AAAAAA\" />\n      <meshLambertMaterial ref={reflectionMaterial} map={thinFilmFresnelMap} envMap={envMap} color=\"#FFFFFF\" />\n      {mirrorsData.mirrors.map((mirror, index) => (\n        <Mirror\n          key={`mirror-${index}`}\n          layers={layers}\n          {...mirror}\n          name={`mirror-${index}`}\n          sideMaterial={sideMaterial.current}\n          reflectionMaterial={reflectionMaterial.current}\n        />\n      ))}\n    </group>\n  )\n}\n\nfunction TitleCopies({ layers }) {\n  const vertices = useMemo(() => {\n    const y = new THREE.IcosahedronGeometry(10)\n    return y.vertices\n  }, [])\n\n  return (\n    <group name=\"titleCopies\">\n      {vertices.map((vertex, i) => (\n        <Title name={'titleCopy-' + i} position={vertex} layers={layers} />\n      ))}\n    </group>\n  )\n}\n\nfunction Scene() {\n  const [cubeCamera, renderTarget] = useRenderTarget()\n  const group = useSlerp()\n\n  const [matcapTexture] = useMatcapTexture('C8D1DC_575B62_818892_6E747B')\n\n  return (\n    <>\n      <group name=\"sceneContainer\" ref={group}>\n        <Octahedron layers={[11]} name=\"background\" args={[20, 4, 4]} position={[0, 0, -5]}>\n          <meshMatcapMaterial matcap={matcapTexture} side={THREE.BackSide} transparent opacity={0.3} color=\"#FFFFFF\" />\n        </Octahedron>\n        <cubeCamera\n          layers={[11]}\n          name=\"cubeCamera\"\n          ref={cubeCamera}\n          args={[0.1, 100, renderTarget]}\n          position={[0, 0, 5]}\n        />\n        <Title name=\"title\" position={[0, 0, -10]} />\n        <TitleCopies layers={[11]} />\n        <Mirrors layers={[0, 11]} envMap={renderTarget.texture} />\n      </group>\n    </>\n  )\n}\n\nexport default Scene\n","import React, { useMemo } from 'react'\nimport * as THREE from 'three'\nimport { useFrame } from 'react-three-fiber'\nimport { Text, useMatcapTexture, Octahedron, useGLTFLoader } from '@react-three/drei'\n\nimport useSlerp from './use-slerp'\nimport useRenderTarget from './use-render-target'\nimport { ThinFilmFresnelMap } from './ThinFilmFresnelMap'\nimport { mirrorsData as diamondsData } from './data'\nimport useLayers from './use-layers'\n\nconst TEXT_PROPS = {\n  fontSize: 5,\n  font: 'https://fonts.gstatic.com/s/monoton/v10/5h1aiZUrOngCibe4TkHLRA.woff'\n}\n\nfunction Title({ material, texture, map, layers, ...props }) {\n  const textRef = useLayers(layers)\n\n  return (\n    <group {...props}>\n      <Text ref={textRef} name=\"text-olga\" depthTest={false} position={[0, -1, 0]} {...TEXT_PROPS}>\n        OLGA\n        <meshPhysicalMaterial envMap={texture} map={map} roughness={0} metalness={1} color=\"#FFFFFF\" />\n      </Text>\n    </group>\n  )\n}\n\nfunction Diamond({ map, texture, matcap, layers, ...props }) {\n  const ref = useLayers(layers)\n\n  useFrame(() => {\n    if (ref.current) {\n      ref.current.rotation.y += 0.001\n      ref.current.rotation.z += 0.01\n    }\n  })\n\n  return (\n    <mesh ref={ref} {...props}>\n      <meshMatcapMaterial matcap={matcap} transparent opacity={0.9} color=\"#14CEFF\" />\n    </mesh>\n  )\n}\n\nfunction Diamonds({ layers, ...props }) {\n  const [matcapTexture] = useMatcapTexture('2E763A_78A0B7_B3D1CF_14F209')\n  const { nodes } = useGLTFLoader(process.env.PUBLIC_URL + '/diamond.glb')\n\n  return (\n    <group name=\"diamonds\" {...props}>\n      {diamondsData.mirrors.map((mirror, index) => (\n        <Diamond\n          key={`diamond-${index}`}\n          name={`diamond-${index}`}\n          {...mirror}\n          geometry={nodes.Cylinder.geometry}\n          matcap={matcapTexture}\n          scale={[0.5, 0.5, 0.5]}\n          layers={layers}\n        />\n      ))}\n    </group>\n  )\n}\n\nfunction Background({ layers, ...props }) {\n  const ref = useLayers(layers)\n  const [matcapTexture] = useMatcapTexture('BA5DBA_F2BEF2_E69BE6_DC8CDC')\n\n  return (\n    <Octahedron ref={ref} name=\"background\" args={[20, 4, 4]} {...props}>\n      <meshMatcapMaterial matcap={matcapTexture} side={THREE.BackSide} color=\"#FFFFFF\" />\n    </Octahedron>\n  )\n}\n\nfunction Scene() {\n  const [cubeCamera, renderTarget] = useRenderTarget()\n  const thinFilmFresnelMap = useMemo(() => new ThinFilmFresnelMap(410, 0, 5, 1024), [])\n  const group = useSlerp()\n  return (\n    <>\n      <Background layers={[0, 11]} position={[0, 0, -5]} />\n      <cubeCamera\n        layers={[11]}\n        name=\"cubeCamera\"\n        ref={cubeCamera}\n        args={[0.1, 100, renderTarget]}\n        position={[0, 0, -12]}\n      />\n      <group name=\"sceneContainer\" ref={group}>\n        <Diamonds layers={[0, 11]} />\n        <group name=\"text\" position={[0, 0, -5]}>\n          <Title layers={[0]} name=\"title\" texture={renderTarget.texture} map={thinFilmFresnelMap} />\n        </group>\n      </group>\n    </>\n  )\n}\n\nexport default Scene\n","import React, { useEffect, useMemo, useRef } from 'react'\nimport * as THREE from 'three'\nimport { useResource } from 'react-three-fiber'\nimport { Text, Box, Octahedron, Plane } from '@react-three/drei'\nimport { Physics, useBox, usePlane } from '@react-three/cannon'\n\nimport useSlerp from './use-slerp'\nimport useRenderTarget from './use-render-target'\nimport useLayers from './use-layers'\n\nconst textProps = {\n  fontSize: 4,\n  font: 'https://fonts.gstatic.com/s/kanit/v7/nKKU-Go6G5tXcr4WPBWnVac.woff'\n}\n\nconst BG_COLOR = '#921212'\nconst PEDRO_COLOR = \"#aaa\"\nconst CLICKHERE_COLOR = \"#f70131\"\nconst REFLECTION_SIDE_COLOR = \"#929292\"\nconst DARK_SIDE_COLOR = \"#921212\"\n\nfunction Title({ layers, label = '', color = 0xffffff, ...props }) {\n  const group = useRef()\n\n  useEffect(() => {\n    group.current.lookAt(0, 0, 0)\n  }, [])\n\n  return (\n    <group {...props} ref={group}>\n      <Text castShadow name={label} depthTest={false} material-toneMapped={false} {...textProps} layers={layers}>\n        {label}\n        <meshBasicMaterial color={color} />\n      </Text>\n    </group>\n  )\n}\n\nfunction TitleCopies({ layers, label, color, ...props }) {\n  const vertices = useMemo(() => {\n    const y = new THREE.CircleGeometry(10, 4, 4)\n    return y.vertices\n  }, [])\n\n  return (\n    <group name=\"titleCopies\" {...props}>\n      {vertices.map((vertex, i) => (\n        <Title name={'titleCopy-' + i} label={label} position={vertex} layers={layers} color={color} />\n      ))}\n    </group>\n  )\n}\n\nfunction PhysicalWalls(props) {\n  usePlane(() => ({ ...props }))\n\n  // back wall\n  usePlane(() => ({ position: [0, 0, -20] }))\n\n  return (\n    <Plane args={[1000, 1000]} {...props} receiveShadow>\n      <shadowMaterial transparent opacity={0.2} />\n    </Plane>\n  )\n}\n\nfunction PhysicalTitle(props) {\n  useBox(() => ({ ...props }))\n  return null\n}\n\nfunction Mirror({ sideMaterial, reflectionMaterial, ...props }) {\n  const [ref, api] = useBox(() => props)\n\n  return (\n    <Box\n      ref={ref}\n      args={props.args}\n      onClick={() => api.applyImpulse([0, 0, -50], [0, 0, 0])}\n      receiveShadow\n      castShadow\n      material={[sideMaterial, sideMaterial, sideMaterial, sideMaterial, reflectionMaterial, sideMaterial]}\n    />\n  )\n}\n\nfunction Mirrors({ envMap }) {\n  const ROWS = 4\n  const COLS = 10\n  const BOX_SIZE = 2\n\n  const sideMaterial = useResource()\n  const reflectionMaterial = useResource()\n\n  const mirrorsData = useMemo(\n    () =>\n      new Array(ROWS * COLS).fill().map((_, index) => ({\n        mass: 1,\n        material: { friction: 1, restitution: 0 },\n        args: [BOX_SIZE, BOX_SIZE, BOX_SIZE],\n        position: [\n          -COLS + ((index * BOX_SIZE) % (BOX_SIZE * COLS)),\n          -1 + BOX_SIZE * Math.floor((index * BOX_SIZE) / (BOX_SIZE * COLS)),\n          0\n        ]\n      })),\n    []\n  )\n\n  return (\n    <>\n      <meshPhysicalMaterial ref={sideMaterial} color={DARK_SIDE_COLOR} envMap={envMap} roughness={0.8} metalness={0.2} />\n      <meshPhysicalMaterial ref={reflectionMaterial} envMap={envMap} roughness={0} metalness={1} color={REFLECTION_SIDE_COLOR} />\n      <group name=\"mirrors\">\n        {mirrorsData.map((mirror, index) => (\n          <Mirror\n            key={`0${index}`}\n            name={`mirror-${index}`}\n            {...mirror}\n            sideMaterial={sideMaterial.current}\n            reflectionMaterial={reflectionMaterial.current}\n          />\n        ))}\n      </group>\n    </>\n  )\n}\n\nfunction Background({ layers, ...props }) {\n  const ref = useLayers(layers)\n  return (\n    <Octahedron ref={ref} name=\"background\" args={[100]} {...props}>\n      <meshBasicMaterial color={BG_COLOR} side={THREE.BackSide} />\n    </Octahedron>\n  )\n}\n\nexport default function Scene() {\n  const group = useSlerp()\n  const [cubeCamera, renderTarget] = useRenderTarget()\n\n  return (\n    <>\n      <group name=\"sceneContainer\" ref={group}>\n        <Background layers={[0, 11]} position={[0, 0, -5]} />\n        <cubeCamera\n          layers={[11]}\n          name=\"cubeCamera\"\n          ref={cubeCamera}\n          position={[0, 0, 0]}\n          args={[0.1, 100, renderTarget]}\n        />\n\n        <Title name=\"title\" label=\"PEDRO\" position={[0, 2, -10]} color={PEDRO_COLOR} />\n        <TitleCopies position={[0, 2, -5]} rotation={[0, 0, 0]} layers={[11]} label=\"PEDRO\"  color={PEDRO_COLOR} />\n\n        <Title layers={[11]} name=\"title\" label=\"CLICK HERE\" position={[0, 2, 24]} scale={[-1, 1, 1]} color={CLICKHERE_COLOR} />\n\n        <Physics gravity={[0, -10, 0]}>\n          <Mirrors envMap={renderTarget.texture} />\n          <PhysicalWalls rotation={[-Math.PI / 2, 0, 0]} position={[0, -2, 0]} />\n          <PhysicalTitle args={[13, 2.5, 0.1]} position={[0, 2.25, -10]} />\n        </Physics>\n      </group>\n\n      <pointLight\n        castShadow\n        position={[0, 10, 2]}\n        intensity={4}\n        shadow-mapSize-width={1024}\n        shadow-mapSize-height={1024}\n        shadow-camera-far={100}\n        shadow-camera-left={-10}\n        shadow-camera-right={10}\n        shadow-camera-top={10}\n        shadow-camera-bottom={-10}\n      />\n    </>\n  )\n}","import { render } from 'react-dom'\nimport React, { Suspense } from 'react'\nimport { Canvas } from 'react-three-fiber'\nimport { useProgress, Html } from '@react-three/drei'\nimport { HashRouter as Router, Switch, Route, NavLink, Redirect } from 'react-router-dom'\n\nimport Scene1 from './Scene1'\nimport Scene2 from './Scene2'\nimport Scene3 from './Scene3'\n\nimport \"./base.css\"\n\nfunction Loader() {\n  const { progress } = useProgress()\n  return (\n    <Html center>\n      <span style={{ color: '#FFFFFF' }}>{progress} % loaded</span>\n    </Html>\n  )\n}\n\nfunction App(props) {\n  const { scene = 1 } = props\n  return (\n    <Canvas concurrent shadowMap camera={{ position: [0, 0, 5], fov: 70 }}>\n      <color attach=\"background\" args={['#000']} />\n      <Suspense fallback={<Loader />}>\n        {scene === 1 && <Scene1 />}\n        {scene === 2 && <Scene2 />}\n        {scene === 3 && <Scene3 />}\n      </Suspense>\n      <ambientLight intensity={0.4} />\n    </Canvas>\n  )\n}\n\nfunction Body() {\n  return (\n    <Router>\n      <main>\n        <div className=\"content\">\n          <Switch>\n            <Route exact >\n              <App scene={1} />\n            </Route>\n          </Switch>\n        </div>\n      </main>\n    </Router>\n  )\n}\n\nrender(<Body />, document.querySelector('#root'))\n"],"sourceRoot":""}